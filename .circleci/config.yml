version: 2.1

commands:
  install_aws_cli:
    description: Install aws cli on Circle ci base images.
    #parameters:
    steps:
      - run: 
          name: Install aws cli 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
  install_ansible:
    description: Install ansible on Circle ci base images.
    #parameters:
    steps:
      - run: 
          name: Install Ansible 
          command: |
            apt update
            apt install software-properties-common
            add-apt-repository --yes --update ppa:ansible/ansible
            apt install ansible -y 

  install_nodejs:
    description: Install nodejs on Circle ci base images.
    #parameters:
    steps:
      - run: 
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            apt install -y nodejs
            npm install --global n 
            n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS == 1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run front-end test
          command: |
             cd frontend
             npm install 
             npm run test
  test-backend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run back-end test
          command: |
             cd backend
             npm install 
             npm run test          
  scan-frontend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run front-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
                yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1
             
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            echo $BACKEND_PUBLIC_IP
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      -  destroy-environment
          

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_aws_cli
      - add_ssh_keys:
          fingerprints: ["89:7f:4b:9b:ba:54:53:d5:ed:de:a0:34:b7:15:d4:67"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment   

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then 
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi 

      - destroy-environment 
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - restore_cache:
          keys: ["frontend-dependencies"]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["89:7f:4b:9b:ba:54:53:d5:ed:de:a0:34:b7:15:d4:67"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: ["backend-dependencies"]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend modules
          command: |
            cd backend
            npm run build 
            tar -czvf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations    

  smoke-test:
    docker:
      - image: cimg/base:stable
      
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |

      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL=http://${BACKEND_IP}:3030
            echo API_URL
            if curl -s $API_URL/api/status |grep "ok"
            then 
              exit 0
            else 
              exit 1 
            fi
      - run:
          name: Frontend smoke test.
          command: |
           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
           echo ${URL} 
           if curl -s $URL | grep "Welcome"
           then
             exit 0
           else
             exit 1
           fi
      - destroy-environment
      - revert-migrations    


  cloudfront-update:
    docker:
     - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: get old workflow id 
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name InitialStack
      - destroy-environment
      - revert-migrations    

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
            # export STACKS=[] #put the list of stacks here
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      # # - run:
      # #     name: Remove old stacks and files
      # #     command: |
      
      #       #echo OldWorkflowID: "${OldWorkflowID}"
      #       if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #       then
      #         echo "aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive"
      #         aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
      #         aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
      #         aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
      #       fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations,deploy-backend]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]          
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]          
###
